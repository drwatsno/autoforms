{"version":3,"sources":["autoforms.js"],"names":["AUTOFORM_FIELD_INVALID_CLASS","AUTOFORM_FORM_INVALID_CLASS","AUTOFORM_SUBMIT_INVALID_CLASS","AUTOFORM_HOVERED_ONCE","AUTOFORM_KEYERROR_WRAP_CLASS","AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS","HTML5_INPUT_TYPES","E_VALIDATION","E_EMPTY","E_EMPTY_CHECKBOX","DEFAULT_VALIDATORS","field","nodeLink","value","length","validatorFunction","checkedVals","autoFormLink","querySelector","getAttribute","undefined","dataOpts","required","test","checked","ErrorMessage","empty","message","options","validators","type","errorMessage","dataset","name","Field","node","autoForm","instance","autoformField","fieldType","attributes","valid","addFieldListeners","currentField","allowAllSymbols","checkString","additionalValidation","addEventListener","updateState","classList","remove","evt","keyCode","submit","disabled","tagName","click","keypressValidatorFunction","keys","split","map","char","charCodeAt","join","search","which","preventDefault","PositiveValidation","isValid","add","LeaveUnvalidHighlights","contains","callFromGroup","errorString","group","isGroupValid","groupValidateOperator","AutoForm","htmlElementNode","errorStack","validationErrors","emptyErrors","emptyCheckboxes","setDefaultOptions","mergeValidators","initMutationObserver","updateWatchedFieldsList","ShowErrorMsg","PrettyPrintErrors","EnableAnimations","DeactivateSubmit","FormInvalidClass","CancelButton","CancelErrorMsg","key","hasOwnProperty","MutationObserver","observer","mutations","update","forEach","mutation","target","observe","childList","characterData","subtree","error","addToStack","concat","err","push","document","id","getSubmitButtonNode","fields","thisNodeId","querySelectorAll","fieldTypeHTML","groupName","filter","operator","getFieldsByGroup","groupValid","clearErrorsStack","addErrorToStack","innerHTML","parentElement","removeAttribute","e","console","setAttribute","parentNode","highlightInvalidFields","getElementById","style","opacity","opts","autoforms","widgets","init","aufm","newElementName","className","toLowerCase","replace","RegExp","newAufmWidget","autoform","initEvents","root","factory","define","amd","module","exports","returnExports"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBA,IAAMA,+BAA+B,kBAArC;AACA,IAAMC,8BAA8B,uBAApC;AACA,IAAMC,gCAAgC,yBAAtC;AACA,IAAMC,wBAAwB,8BAA9B;AACA,IAAMC,+BAA+B,kBAArC;AACA,IAAMC,sCAAsC,kBAA5C;AACA,IAAMC,oBAAoB,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,OAAjC,EAA0C,QAA1C,EAAoD,OAApD,EAA6D,MAA7D,EAAqE,UAArE,EAAiF,gBAAjF,EAAmG,OAAnG,EAA4G,OAA5G,EAAqH,QAArH,EAA+H,KAA/H,EAAsI,MAAtI,EAA8I,KAA9I,EAAqJ,OAArJ,EAA8J,MAA9J,EAAsK,MAAtK,CAA1B;;AAEA,IAAMC,eAAe,GAArB;AACA,IAAMC,UAAU,GAAhB;AACA,IAAMC,mBAAmB,GAAzB;AACA,IAAMC,qBAAqB;AACvB,YAAQ;AACJ,gBAAQ,EADJ;AAEJ,wBAAgB,gBAFZ;AAGJ,6BAAqB,KAHjB;AAIJ,qCAA6B;AAJzB,KADe;AAOvB,gBAAY;AACR,gBAAQ,EADA;AAER,wBAAgB,gBAFR;AAGR,6BAAqB,KAHb;AAIR,qCAA6B;AAJrB,KAPW;AAavB,gBAAY;AACR,gBAAQ,EADA;AAER,wBAAgB,gBAFR;AAGR,6BAAqB,KAHb;AAIR,qCAA6B;AAJrB,KAbW;AAmBvB,gBAAY;AACR,gBAAQ,mFADA;AAER,wBAAgB,iBAFR;AAGR,6BAAqB,KAHb;AAIR,qCAA6B;AAJrB,KAnBW;AAyBvB,WAAO;AACH,gBAAQ,mFADL;AAEH,wBAAgB,iBAFb;AAGH,6BAAqB,KAHlB;AAIH,qCAA6B;AAJ1B,KAzBgB;AA+BvB,YAAQ;AACJ,gBAAQ,cADJ;AAEJ,wBAAgB,kCAFZ;AAGJ,6BAAqB,KAHjB;AAIJ,qCAA6B,mCAAUC,KAAV,EAAiB;AAC1C,mBAAQA,MAAMC,QAAN,CAAeC,KAAf,CAAqBC,MAArB,GAA8B,EAAtC;AACH;AANG,KA/Be;AAuCvB,aAAS;AACL,gBAAQ,mBADH;AAEL,wBAAgB,mBAFX;AAGL,6BAAqB,KAHhB;AAIL,qCAA6B;AAJxB,KAvCc;AA6CvB,aAAS;AACL,gBAAQ,EADH;AAEL,wBAAgB,kCAFX;AAGL,6BAAqB,SAASC,iBAAT,CAA2BJ,KAA3B,EAAkC;AACnD,gBAAMK,cAAcL,MAAMM,YAAN,CAAmBL,QAAnB,CAA4BM,aAA5B,mBAAyDP,MAAMC,QAAN,CAAeO,YAAf,CAA4B,MAA5B,CAAzD,iBAApB;;AAEA,mBAAOH,cAAeA,YAAYH,KAAZ,KAAsBO,SAAtB,IAAmC,CAACT,MAAMU,QAAN,CAAeC,QAAlE,GAA8E,KAArF;AACH,SAPI;AAQL,qCAA6B;AARxB,KA7Cc;AAuDvB,cAAU;AACN,gBAAQ,EADF;AAEN,wBAAgB,+BAFV;AAGN,6BAAqB,KAHf;AAIN,qCAA6B;AAJvB,KAvDa;AA6DvB,aAAS;AACL,gBAAQ,oEADH;AAEL,wBAAgB,oBAFX;AAGL,6BAAqB,2BAAUX,KAAV,EAAiB;AAClC,mBAAQ,oBAAD,CAAsBY,IAAtB,CAA2BZ,MAAMC,QAAN,CAAeC,KAA1C;AAAP;AACH,SALI;AAML,qCAA6B;AANxB,KA7Dc;AAqEvB,gBAAY;AACR,gBAAQ,EADA;AAER,wBAAgB,wBAFR;AAGR,6BAAqB,SAASE,iBAAT,CAA2BJ,KAA3B,EAAkC;AACnD,gBAAIA,MAAMC,QAAN,CAAeY,OAAnB,EAA4B;AACxB,uBAAO,IAAP;AACH;AACD,mBAAO,OAAOb,MAAMU,QAAN,CAAeC,QAAtB,KAAmC,WAA1C;AACH,SARO;AASR,qCAA6B;AATrB,KArEW;AAgFvB,YAAQ;AACJ,gBAAQ,EADJ;AAEJ,wBAAgB,oBAFZ;AAGJ,6BAAqB,2BAAUX,KAAV,EAAiB;AAClC,mBAAO,CAAC,CAACA,MAAMC,QAAN,CAAeC,KAAxB;AACH;AALG,KAhFe;AAuFvB,cAAU;AACN,gBAAQ,YADF;AAEN,wBAAgB,mBAFV;AAGN,6BAAqB,KAHf;AAIN,qCAA6B;AAJvB;AAvFa,CAA3B;;IA+FMY,Y,GACF,sBAAYd,KAAZ,EAAmB;AAAA;;AACf,QAAI,CAACA,MAAMe,KAAX,EAAkB;AACd,aAAKC,OAAL,GAAehB,MAAMM,YAAN,CAAmBW,OAAnB,CAA2BC,UAA3B,CAAsClB,MAAMmB,IAA5C,EAAkDC,YAAlD,GAAiE,GAAjE,IAAwEpB,MAAMC,QAAN,CAAeoB,OAAf,CAAuBC,IAAvB,IAA+BtB,MAAMC,QAAN,CAAeqB,IAAtH,CAAf;AACA,YAAItB,MAAMmB,IAAN,KAAe,UAAnB,EAA+B;AAC3B,iBAAKA,IAAL,GAAYvB,YAAZ;AACH,SAFD,MAEO;AACH,iBAAKuB,IAAL,GAAYrB,gBAAZ;AACH;AACJ,KAPD,MAOO;AACH,aAAKkB,OAAL,IAAkBhB,MAAMC,QAAN,CAAeoB,OAAf,CAAuBC,IAAvB,IAA+BtB,MAAMC,QAAN,CAAeqB,IAAhE;AACA,aAAKH,IAAL,GAAYtB,OAAZ;AACH;AACD,SAAKG,KAAL,GAAaA,KAAb;AACH,C;;IAECuB,K;AACF;;;;;;AAMA,mBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AACxB,YAAMC,WAAW,IAAjB;;AAEAF,aAAKG,aAAL,GAAqBD,QAArB;AACAA,iBAASzB,QAAT,GAAoBuB,IAApB;AACAE,iBAAShB,QAAT,GAAoBc,KAAKH,OAAzB;AACAK,iBAASP,IAAT,GAAgBO,SAAShB,QAAT,CAAkBkB,SAAlB,KAAgCF,SAASzB,QAAT,CAAkB4B,UAAlB,CAA6BV,IAA7B,GAAoCO,SAASzB,QAAT,CAAkB4B,UAAlB,CAA6BV,IAA7B,CAAkCjB,KAAtE,GAA8E,MAA9G,CAAhB;AACAwB,iBAASX,KAAT,GAAiB,KAAjB;AACAW,iBAASI,KAAT,GAAiB,KAAjB;AACAJ,iBAASpB,YAAT,GAAwBmB,QAAxB;AACAC,iBAASK,iBAAT;AACH;;AAED;;;;;;;4CAGoB;AAChB,gBAAMC,eAAe,IAArB;;AAEA,gBAAIC,kBAAkB,KAAtB;AAAA,gBACIC,oBADJ;AAAA,gBAEIC,uBAAuB,IAF3B;;AAIAH,yBAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,OAAvC,EAAgD;AAAA,uBAAMJ,aAAa1B,YAAb,CAA0B+B,WAA1B,EAAN;AAAA,aAAhD;AACAL,yBAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,QAAvC,EAAiD;AAAA,uBAAMJ,aAAa1B,YAAb,CAA0B+B,WAA1B,EAAN;AAAA,aAAjD;AACAL,yBAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,OAAvC,EAAgD,YAAY;AACxDJ,6BAAa1B,YAAb,CAA0B+B,WAA1B;AACA,qBAAKC,SAAL,CAAeC,MAAf,CAAsBlD,4BAAtB;AACH,aAHD;AAIA2C,yBAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,UAAvC,EAAmD,UAAUI,GAAV,EAAe;AAC9D,oBAAKA,IAAIC,OAAJ,KAAgB,EAAjB,IAAyBT,aAAa1B,YAAb,CAA0BoC,MAA1B,CAAiCb,UAAjC,CAA4Cc,QAA5C,KAAyD,UAAlF,IAAkG,KAAKC,OAAL,KAAiB,UAAvH,EAAoI;AAChIZ,iCAAa1B,YAAb,CAA0BoC,MAA1B,CAAiCG,KAAjC;AACH;;AAED,oBAAIb,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkCC,UAAlC,CAA6Cc,aAAab,IAA1D,EAAgE2B,yBAApE,EAA+F;AAC3FX,2CAAuBH,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkCC,UAAlC,CAA6Cc,aAAab,IAA1D,EAAgE2B,yBAAhE,CAA0Fd,YAA1F,CAAvB;AACH;AACD,oBAAIA,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkCC,UAAlC,CAA6Cc,aAAab,IAA1D,EAAgE4B,IAApE,EAA0E;AACtEb,kCAAcF,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkCC,UAAlC,CAA6Cc,aAAab,IAA1D,EAAgE4B,IAAhE,CAAqEC,KAArE,CAA2E,EAA3E,EAA+EC,GAA/E,CACV,UAASC,IAAT,EAAc;AACV,+BAAOA,KAAKC,UAAL,EAAP;AACH,qBAHS,EAGPC,IAHO,CAGF,GAHE,IAGK,YAHnB;AAIH,iBALD,MAKO;AACHnB,sCAAkB,IAAlB;AACH;;AAED,oBAAIE,wBAAyB,CAACF,eAA1B,IAA+CC,YAAYmB,MAAZ,CAAmBb,IAAIc,KAAvB,MAAkC,CAAC,CAAtF,EAA0F;AACtFd,wBAAIe,cAAJ;AACA,2BAAO,KAAP;AACA;AACH;AACJ,aAtBD;;AAwBA,gBAAIvB,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkCuC,kBAAtC,EAA0D;AACtDxB,6BAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,UAAvC,EAAmD,YAAY;AAC3D,wBAAIJ,aAAayB,OAAb,EAAJ,EAA4B;AACxBzB,qCAAa/B,QAAb,CAAsBqC,SAAtB,CAAgCoB,GAAhC,CAAoC,OAApC;AACA1B,qCAAa/B,QAAb,CAAsBqC,SAAtB,CAAgCC,MAAhC,CAAuClD,4BAAvC;AACH,qBAHD,MAGO;AACH,4BAAI2C,aAAa1B,YAAb,CAA0BW,OAA1B,CAAkC0C,sBAAlC,IAA4D3B,aAAa1B,YAAb,CAA0BL,QAA1B,CAAmCqC,SAAnC,CAA6CsB,QAA7C,CAAsDpE,qBAAtD,CAAhE,EAA8I;AAC1IwC,yCAAa/B,QAAb,CAAsBqC,SAAtB,CAAgCoB,GAAhC,CAAoCrE,4BAApC;AACH;AACJ;AACJ,iBATD;AAUA2C,6BAAa/B,QAAb,CAAsBmC,gBAAtB,CAAuC,SAAvC,EAAkD,YAAU;AACxDJ,iCAAa/B,QAAb,CAAsBqC,SAAtB,CAAgCC,MAAhC,CAAuC,OAAvC;AACH,iBAFD;AAGH;AACJ;;AAED;;;;;;;;gCAKQsB,a,EAAe;AACnB,gBAAMnC,WAAW,IAAjB;;AAEAA,qBAASX,KAAT,GAAiBW,SAASzB,QAAT,CAAkBC,KAAlB,KAA4B,EAA7C;;AAEA,gBAAI,CAACwB,SAASX,KAAd,EAAsB;AAClB,oBAAIW,SAASpB,YAAT,CAAsBW,OAAtB,CAA8BC,UAA9B,CAAyCQ,SAASP,IAAlD,CAAJ,EAA6D;AACzD,wBAAIO,SAASpB,YAAT,CAAsBW,OAAtB,CAA8BC,UAA9B,CAAyCQ,SAASP,IAAlD,EAAwDf,iBAA5D,EAA+E;AAC3EsB,iCAASI,KAAT,GAAiBJ,SAASpB,YAAT,CAAsBW,OAAtB,CAA8BC,UAA9B,CAAyCQ,SAASP,IAAlD,EAAwDf,iBAAxD,CAA0EsB,QAA1E,CAAjB;AACH,qBAFD,MAEO;AACHA,iCAASI,KAAT,GAAiB,IAAjB;AACH;AACJ,iBAND,MAMO;AACHJ,6BAASI,KAAT,GAAiB,IAAjB;AACH;AACJ,aAVD,MAWK;AACD,oBAAKJ,SAAShB,QAAT,CAAkBC,QAAlB,KAA+B,IAAhC,IAA0Ce,SAAShB,QAAT,CAAkBC,QAAlB,KAA+BF,SAA7E,EAAyF;AACrFiB,6BAASI,KAAT,GAAiB,IAAjB;AACH,iBAFD,MAGK;AACDJ,6BAASpB,YAAT,CAAsBwD,WAAtB,GAAoC,yBAApC;AACApC,6BAASI,KAAT,GAAiB,KAAjB;AACH;AACJ;AACD,gBAAIJ,SAAShB,QAAT,CAAkBqD,KAAlB,IAA2B,CAACF,aAAhC,EAA+C;AAC3CnC,yBAASI,KAAT,GAAiBJ,SAASpB,YAAT,CAAsB0D,YAAtB,CAAmCtC,SAAShB,QAAT,CAAkBqD,KAArD,EAA4DrC,SAAShB,QAAT,CAAkBuD,qBAA9E,CAAjB;AACH;AACD,mBAAOvC,SAASI,KAAhB;AACH;;;;;;AAGL;;;;;;;IAOMoC,Q;AACF,sBAAYC,eAAZ,EAA6BlD,OAA7B,EAAsC;AAAA;;AAClC,YAAMS,WAAW,IAAjB;;AAEAA,iBAAS0C,UAAT,GAAsB;AAClBC,8BAAkB,EADA;AAElBC,yBAAa,EAFK;AAGlBC,6BAAiB;AAHC,SAAtB;AAKA7C,iBAASI,KAAT,GAAiB,KAAjB;AACAJ,iBAASzB,QAAT,GAAoBkE,eAApB;AACAzC,iBAAST,OAAT,GAAmBS,SAAS8C,iBAAT,CAA2BvD,OAA3B,CAAnB;;AAEAS,iBAAS+C,eAAT,CAAyBxD,QAAQC,UAAjC;AACAQ,iBAASgD,oBAAT;AACAhD,iBAASiD,uBAAT;AACH;;;;0CAEiB1D,O,EAAS;AACvB,mBAAO;AACHC,4BAAYnB,kBADT;AAEH6E,8BAAc3D,QAAQ2D,YAAR,IAAwB,KAFnC;AAGHC,mCAAmB5D,QAAQ4D,iBAAR,IAA6B,IAH7C;AAIHC,kCAAkB7D,QAAQ6D,gBAAR,IAA4B,IAJ3C;AAKHC,kCAAkB9D,QAAQ8D,gBAAR,IAA4B,IAL3C;AAMHC,kCAAkB/D,QAAQ+D,gBAAR,IAA4B,IAN3C;AAOHC,8BAAchE,QAAQgE,YAAR,IAAwB,SAPnC;AAQHC,gCAAgBjE,QAAQiE,cAAR,IAA0B,KARvC;AASH1B,oCAAoBvC,QAAQuC,kBAAR,IAA8B,IAT/C;AAUHG,wCAAwB1C,QAAQ0C,sBAAR,IAAkC;AAVvD,aAAP;AAYH;;;wCAEezC,U,EAAY;AACxB,gBAAMQ,WAAW,IAAjB;;AAEA,iBAAK,IAAMyD,GAAX,IAAkBjE,UAAlB,EAA8B;AAC1B,oBAAIA,WAAWkE,cAAX,CAA0BD,GAA1B,CAAJ,EAAoC;AAChCzD,6BAAST,OAAT,CAAiBC,UAAjB,CAA4BiE,GAA5B,IAAmCjE,WAAWiE,GAAX,CAAnC;AACH;AACJ;AACJ;;;+CAEsB;AACnB,gBAAMzD,WAAW,IAAjB;;AAEA,gBAAI2D,gBAAJ,EAAsB;AAClB,oBAAMC,WAAW,IAAID,gBAAJ,CAAqB,UAASE,SAAT,EAAoB;AACtD,wBAAIC,SAAS,KAAb;;AAEAD,8BAAUE,OAAV,CAAkB,UAASC,QAAT,EAAmB;AACjC,4BAAIA,SAASvE,IAAT,KAAkB,WAAlB,IAAiCuE,SAASC,MAAT,CAAgBrD,SAAhB,CAA0B,CAA1B,MAAiC5C,mCAAtE,EAA2G;AACvG8F,qCAAS,IAAT;AACH;AACJ,qBAJD;;AAMA,wBAAIA,MAAJ,EAAY;AACR9D,iCAASiD,uBAAT;AACH;AACJ,iBAZgB,CAAjB;;AAcAW,yBAASM,OAAT,CAAiBlE,SAASzB,QAA1B,EAAoC;AAChC4B,gCAAY,IADoB;AAEhCgE,+BAAW,IAFqB;AAGhCC,mCAAe,IAHiB;AAIhCC,6BAAS;AAJuB,iBAApC;AAMH;AACJ;;AAED;;;;;;;wCAIgBC,K,EAAO;AACnB,gBAAIC,aAAa,IAAjB;AACA,iBAAK7B,UAAL,CAAgBE,WAAhB,CAA4B4B,MAA5B,CACI,KAAK9B,UAAL,CAAgBC,gBAAhB,CAAiC6B,MAAjC,CAAwC,KAAK9B,UAAL,CAAgBG,eAAxD,CADJ,EAEEkB,OAFF,CAEU,UAASU,GAAT,EAAc;AACpB,oBAAIH,MAAMhF,OAAN,KAAkBmF,IAAInF,OAA1B,EAAmC;AAC/BiF,iCAAa,KAAb;AACH;AACJ,aAND;;AAQA,gBAAIA,UAAJ,EAAgB;AACZ,wBAAQD,MAAM7E,IAAd;AACI,yBAAKrB,gBAAL;AAAuB;AACnB,iCAAKsE,UAAL,CAAgBG,eAAhB,CAAgC6B,IAAhC,CAAqCJ,KAArC;AACH,yBAAC;AACF,yBAAKpG,YAAL;AAAmB;AACf,iCAAKwE,UAAL,CAAgBC,gBAAhB,CAAiC+B,IAAjC,CAAsCJ,KAAtC;AACH,yBAAC;AACF;AAAS;AACL,iCAAK5B,UAAL,CAAgBE,WAAhB,CAA4B8B,IAA5B,CAAiCJ,KAAjC;AACH;AATL;AAWH;AACJ;;AAED;;;;;;2CAGmB;AACf,iBAAK5B,UAAL,CAAgBE,WAAhB,GAA8B,EAA9B;AACA,iBAAKF,UAAL,CAAgBC,gBAAhB,GAAmC,EAAnC;AACA,iBAAKD,UAAL,CAAgBG,eAAhB,GAAkC,EAAlC;AACH;;;8CAEqB;AAClB,gBAAM7C,WAAW,IAAjB;;AAEA,mBAAOA,SAASzB,QAAT,CAAkBM,aAAlB,CAAgC,wBAAhC,KACHmB,SAASzB,QAAT,CAAkBM,aAAlB,CAAgC,yBAAhC,CADG,IAEH8F,SAAS9F,aAAT,mBAAsCmB,SAASzB,QAAT,CAAkBqG,EAAxD,SAFG,IAGHD,SAAS9F,aAAT,oBAAuCmB,SAASzB,QAAT,CAAkBqG,EAAzD,SAHG,IAIH5E,SAASzB,QAAT,CAAkBM,aAAlB,CAAgC,QAAhC,CAJJ;AAKH;;AAED;;;;;;kDAG0B;AACtB,gBAAMmB,WAAW,IAAjB;;AAEAA,qBAASgB,MAAT,GAAkBhB,SAAS6E,mBAAT,EAAlB;AACA7E,qBAAS8E,MAAT,GAAkB,EAAlB;AACA,gBAAMC,aAAa/E,SAASzB,QAAT,CAAkBqG,EAArC;AACA,gBAAME,SAAS9E,SAASzB,QAAT,CAAkByG,gBAAlB,CACV/G,kBAAkBsD,GAAlB,CAAsB,UAAU0D,aAAV,EAAyB;AAC5C,yCAAsBA,aAAtB,0BAAsDA,aAAtD,mBAA+EF,UAA/E;AACH,aAFA,EAEErD,IAFF,CAEO,IAFP,CAAD,GAGA,YAHA,GAIA,YAJA,uBAKgB,KAAKnD,QAAL,CAAcqG,EAL9B,SADW,CAAf;;AANsB;AAAA;AAAA;;AAAA;AActB,qCAAoBE,MAApB,8HAA4B;AAAA,wBAAjBxG,KAAiB;;AACxB0B,6BAAS8E,MAAT,CAAgBJ,IAAhB,CAAqB,IAAI7E,KAAJ,CAAUvB,KAAV,EAAiB0B,QAAjB,CAArB;AACH;AAhBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBzB;;AAED;;;;;;;;yCAKiBkF,S,EAAW;AACxB,gBAAMlF,WAAW,IAAjB;;AAEA,mBAAOA,SAAS8E,MAAT,CAAgBK,MAAhB,CAAuB,UAAU7G,KAAV,EAAiB;AAC3C,uBAAOA,MAAMU,QAAN,CAAeqD,KAAf,KAAyB6C,SAAhC;AACH,aAFM,CAAP;AAGH;;AAED;;;;;;;;;qCAMaA,S,EAAWE,Q,EAAU;AAC9B,gBAAMpF,WAAW,IAAjB;AACA,gBAAM8E,SAAS9E,SAASqF,gBAAT,CAA0BH,SAA1B,CAAf;AACA,gBAAII,aAAa,KAAjB;;AAEA,oBAAQF,QAAR;AACI,qBAAK,IAAL;AAAW;AACPN,+BAAOf,OAAP,CAAe,UAAUzF,KAAV,EAAiB;AAC5B,gCAAIA,MAAMyD,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACrBuD,6CAAa,IAAb;AACH;AACJ,yBAJD;AAKH,qBAAC;AACF,qBAAK,KAAL;AAAY;AACRA,qCAAa,IAAb;AACAR,+BAAOf,OAAP,CAAe,UAAUzF,KAAV,EAAiB;AAC5B,gCAAI,CAACA,MAAMyD,OAAN,CAAc,IAAd,CAAL,EAA0B;AACtBuD,6CAAa,KAAb;AACH;AACJ,yBAJD;AAKH,qBAAC;AACF;AAAS;AACLA,qCAAa,IAAb;AACAR,+BAAOf,OAAP,CAAe,UAAUzF,KAAV,EAAiB;AAC5B,gCAAI,CAACA,MAAMyD,OAAN,CAAc,IAAd,CAAL,EAA0B;AACtBuD,6CAAa,KAAb;AACH;AACJ,yBAJD;AAKH,qBAAC;AAvBN;;AA0BA,mBAAOA,UAAP;AACH;;AAED;;;;;;;kCAIU;AACN,gBAAMtF,WAAW,IAAjB;;AAEAA,qBAASuF,gBAAT;AACAvF,qBAASI,KAAT,GAAiB,IAAjB;;AAJM;AAAA;AAAA;;AAAA;AAMN,sCAAoBJ,SAAS8E,MAA7B,mIAAqC;AAAA,wBAA1BxG,KAA0B;;AACjC,wBAAI,CAACA,MAAMyD,OAAN,EAAL,EAAsB;AAClB/B,iCAASI,KAAT,GAAiB,KAAjB;AACAJ,iCAASwF,eAAT,CAAyB,IAAIpG,YAAJ,CAAiBd,KAAjB,CAAzB;AACH;AACJ;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYN,mBAAO0B,SAASI,KAAhB;AACH;;;;;AAED;;;sCAGc;AACV,gBAAMJ,WAAW,IAAjB;;AAEA,gBAAIA,SAAS+B,OAAT,EAAJ,EAAwB;AACpB,oBAAI;AACA/B,6BAASzB,QAAT,CAAkBM,aAAlB,OAAoCb,mCAApC,EAA2EyH,SAA3E,GAAuF,EAAvF;AACA,wBAAIzF,SAAST,OAAT,CAAiB+D,gBAArB,EAAuC;AACnCtD,iCAASzB,QAAT,CAAkBqC,SAAlB,CAA4BC,MAA5B,CAAmCjD,2BAAnC;AACH;AACD,wBAAIoC,SAAST,OAAT,CAAiB8D,gBAArB,EAAuC;AACnCrD,iCAASgB,MAAT,CAAgB0E,aAAhB,CAA8B9E,SAA9B,CAAwCC,MAAxC,CAA+ChD,6BAA/C;AACAmC,iCAASgB,MAAT,CAAgB2E,eAAhB,CAAgC,UAAhC;AACH;AACJ,iBATD,CASE,OAAOC,CAAP,EAAU;AACRC,4BAAQvB,KAAR,4BAAuCsB,EAAEtG,OAAzC;AACH;AACD;AACH;;AAED,gBAAIU,SAAST,OAAT,CAAiB4D,iBAArB,EAAwC;AACpC,oBAAI;AACAnD,6BAASzB,QAAT,CAAkBM,aAAlB,OAAoCb,mCAApC,EAA2EyH,SAA3E,GACQ,YAAY;AACZ,4BAAIzF,SAAS0C,UAAT,CAAoBE,WAApB,CAAgCnE,MAAhC,GAAyC,CAA7C,EAAgD;AAC5C,qSAGsBuB,SAAS0C,UAAT,CAAoBE,WAApB,CAAgCrB,GAAhC,CAAoC,UAAUkD,GAAV,EAAe;AACrE,2EAAsCA,IAAInG,KAAJ,CAAUU,QAAV,CAAmBY,IAAnB,IAA2B6E,IAAInG,KAAJ,CAAUC,QAAV,CAAmBqB,IAApF;AACH,6BAFqB,EAEnB8B,IAFmB,CAEd,EAFc,CAHtB;AAQH,yBATD,MASO;AACH,mCAAO,EAAP;AACH;AACJ,qBAbE,EADP,8BAeO,YAAY;AACX,4BAAI1B,SAAS0C,UAAT,CAAoBC,gBAApB,CAAqClE,MAArC,GAA8C,CAAlD,EAAqD;AACjD,oSAGkBuB,SAAS0C,UAAT,CAAoBC,gBAApB,CAAqCpB,GAArC,CAAyC,UAAUkD,GAAV,EAAe;AACtE,2EAAsCA,IAAInG,KAAJ,CAAUU,QAAV,CAAmBY,IAAnB,IAA2B6E,IAAInG,KAAJ,CAAUC,QAAV,CAAmBqB,IAApF;AACH,6BAFiB,EAEf8B,IAFe,CAEV,EAFU,CAHlB;AAQH,yBATD,MASO;AACH,mCAAO,EAAP;AACH;AACJ,qBAbC,EAfN,8BA6BO,YAAY;AACX,4BAAI1B,SAAS0C,UAAT,CAAoBG,eAApB,CAAoCpE,MAApC,GAA6C,CAAjD,EAAoD;AAChD,2RAGkBuB,SAAS0C,UAAT,CAAoBG,eAApB,CAAoCtB,GAApC,CAAwC,UAAUkD,GAAV,EAAe;AACrE,2EAAsCA,IAAInG,KAAJ,CAAUU,QAAV,CAAmBY,IAAnB,IAA2B6E,IAAInG,KAAJ,CAAUC,QAAV,CAAmBqB,IAApF;AACH,6BAFiB,EAEf8B,IAFe,CAEV,EAFU,CAHlB;AAQH,yBATD,MASO;AACH,mCAAO,EAAP;AACH;AACJ,qBAbC,EA7BN;AA2CH,iBA5CD,CA4CE,OAAOkE,CAAP,EAAU;AACRC,4BAAQvB,KAAR,4BAAuCsB,EAAEtG,OAAzC;AACH;AACJ,aAhDD,MAgDO;AACH,oBAAI;AACAU,6BAASzB,QAAT,CAAkBM,aAAlB,OAAoCb,mCAApC,EAA2EyH,SAA3E,GAAuFzF,SAAS0C,UAAT,CAAoBE,WAApB,CAAgC4B,MAAhC,CAAuCxE,SAAS0C,UAAT,CAAoBC,gBAApB,CAAqC6B,MAArC,CAA4CxE,SAAS0C,UAAT,CAAoBG,eAAhE,CAAvC,EAAyHtB,GAAzH,CAA6H,UAAUkD,GAAV,EAAe;AAC/N,kEAAsCA,IAAInF,OAA1C;AACH,qBAFsF,EAEpFoC,IAFoF,CAE/E,EAF+E,CAAvF;AAGH,iBAJD,CAIE,OAAOkE,CAAP,EAAU;AACRC,4BAAQvB,KAAR,4BAAuCsB,EAAEtG,OAAzC;AACH;AACJ;AACD,gBAAIU,SAAST,OAAT,CAAiB+D,gBAArB,EAAuC;AACnCtD,yBAASzB,QAAT,CAAkBqC,SAAlB,CAA4BoB,GAA5B,CAAgCpE,2BAAhC;AACH;AACD,gBAAIoC,SAAST,OAAT,CAAiB8D,gBAArB,EAAuC;AACnCrD,yBAASgB,MAAT,CAAgB0E,aAAhB,CAA8B9E,SAA9B,CAAwCoB,GAAxC,CAA4CnE,6BAA5C;AACAmC,yBAASgB,MAAT,CAAgB8E,YAAhB,CAA6B,UAA7B,EAAyC,UAAzC;AACH;AACJ;;AAED;;;;;;qCAGa;AACT,gBAAM9F,WAAW,IAAjB;;AAEAA,qBAASgB,MAAT,CAAgB+E,UAAhB,CAA2BrF,gBAA3B,CAA4C,YAA5C,EAA0D,YAAY;AAClEV,yBAASgG,sBAAT,CAAgC,IAAhC;AACA,oBAAI,CAAChG,SAASzB,QAAT,CAAkBqC,SAAlB,CAA4BsB,QAA5B,CAAqCpE,qBAArC,CAAL,EAAkE;AAC9DkC,6BAASzB,QAAT,CAAkBqC,SAAlB,CAA4BoB,GAA5B,CAAgClE,qBAAhC;AACH;AACJ,aALD;AAMAkC,qBAASgB,MAAT,CAAgB+E,UAAhB,CAA2BrF,gBAA3B,CAA4C,YAA5C,EAA0D,YAAY;AAClE,oBAAI,CAACV,SAAST,OAAT,CAAiB0C,sBAAtB,EAA8C;AAC1CjC,6BAASgG,sBAAT,CAAgC,KAAhC;AACH;AACD,oBAAIhG,SAAST,OAAT,CAAiB2D,YAArB,EAAmC;AAC/B,wBAAIlD,SAAST,OAAT,CAAiB6D,gBAArB,EAAuC;AACnCpD,iCAASzB,QAAT,CAAkB0H,cAAlB,CAAiClI,4BAAjC,EAA+DmI,KAA/D,CAAqEC,OAArE,GAA+E,CAA/E;AACH,qBAFD,MAGK;AACDnG,iCAASzB,QAAT,CAAkB0H,cAAlB,CAAiClI,4BAAjC,EAA+D0H,SAA/D,GAA2E,EAA3E;AACH;AAEJ;AACJ,aAbD;;AAgBA,gBAAIzF,SAASI,KAAb,EAAoB;AAChB,oBAAIJ,SAAST,OAAT,CAAiB+D,gBAArB,EAAuC;AACnCtD,6BAASzB,QAAT,CAAkBqC,SAAlB,CAA4BC,MAA5B,CAAmCjD,2BAAnC;AACH;AACD,oBAAIoC,SAAST,OAAT,CAAiB8D,gBAArB,EAAuC;AACnCrD,6BAASgB,MAAT,CAAgB+E,UAAhB,CAA2BnF,SAA3B,CAAqCC,MAArC,CAA4ChD,6BAA5C;AACA,wBAAImC,SAASgB,MAAT,CAAgBb,UAAhB,CAA2Bc,QAA/B,EAAyC;AACrCjB,iCAASgB,MAAT,CAAgB2E,eAAhB,CAAgC,UAAhC;AACH;AAEJ;AACJ,aAXD,MAYK;AACD,oBAAI3F,SAAST,OAAT,CAAiB+D,gBAArB,EAAuC;AACnCtD,6BAASzB,QAAT,CAAkBqC,SAAlB,CAA4BC,MAA5B,CAAmCjD,2BAAnC;AACH;AACD,oBAAIoC,SAAST,OAAT,CAAiB8D,gBAArB,EAAuC;AACnCrD,6BAASgB,MAAT,CAAgB+E,UAAhB,CAA2BnF,SAA3B,CAAqCoB,GAArC,CAAyCnE,6BAAzC;AACAmC,6BAASgB,MAAT,CAAgB8E,YAAhB,CAA6B,UAA7B,EAAyC,UAAzC;AACH;AACJ;;AAED,gBAAI9F,SAAST,OAAT,CAAiBiE,cAArB,EAAqC;AACjCmB,yBAAS9F,aAAT,CAAuBmB,SAAST,OAAT,CAAiBgE,YAAxC,EAAsD7C,gBAAtD,CAAuE,YAAvE,EAAqF,YAAY;AAC7FV,6BAASoC,WAAT,GAAuB,+BAAvB;AACH,iBAFD;AAGAuC,yBAAS9F,aAAT,CAAuBmB,SAAST,OAAT,CAAiBgE,YAAxC,EAAsD7C,gBAAtD,CAAuE,YAAvE,EAAqF,YAAY;AAC7FV,6BAASoC,WAAT,GAAuB,EAAvB;AACA,wBAAIpC,SAAST,OAAT,CAAiB6D,gBAArB,EAAuC;AACnCuB,iCAASsB,cAAT,CAAwBlI,4BAAxB,EAAsDmI,KAAtD,CAA4DC,OAA5D,GAAsE,CAAtE;AACH,qBAFD,MAGK;AACDxB,iCAASsB,cAAT,CAAwBlI,4BAAxB,EAAsD0H,SAAtD,GAAkE,EAAlE;AACH;AACJ,iBARD;AASH;AACJ;;AAED;;;;;;;+CAIuBW,I,EAAM;AACzB,gBAAMpG,WAAW,IAAjB;;AADyB;AAAA;AAAA;;AAAA;AAGzB,sCAAoBA,SAAS8E,MAA7B,mIAAqC;AAAA,wBAA1BxG,KAA0B;;AACjC,wBAAI8H,SAAS,KAAb,EAAoB;AAChB,4BAAI9H,MAAMyD,OAAN,EAAJ,EAAqB;AACjBzD,kCAAMC,QAAN,CAAeqC,SAAf,CAAyBC,MAAzB,CAAgClD,4BAAhC;AACH,yBAFD,MAEO;AACHW,kCAAMC,QAAN,CAAeqC,SAAf,CAAyBoB,GAAzB,CAA6BrE,4BAA7B;AACH;AACJ;;AAED,wBAAIyI,SAAS,KAAb,EAAoB;AAChB9H,8BAAMC,QAAN,CAAeqC,SAAf,CAAyBC,MAAzB,CAAgClD,4BAAhC;AACH;AACJ;AAfwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB5B;;;;;;AAGL,IAAM0I,YAAY;AACdC,aAAS,EADK,EACD;AACbC,UAAM,cAAU9D,eAAV,EAA2BlD,OAA3B,EAAoC;AACtC,YAAIkD,eAAJ,EAAqB;AACjB,gBAAM+D,OAAO,IAAb;;AAEA,gBAAMC,iBAAiB,CAAChE,gBAAgBiE,SAAhB,GAA4BjE,gBAAgBmC,EAA7C,EAAiD+B,WAAjD,GAA+DC,OAA/D,CAAuE,IAAIC,MAAJ,CAAW,iBAAX,EAA8B,GAA9B,CAAvE,EAA2G,GAA3G,CAAvB;;AAEA,gBAAI,CAACtH,OAAL,EAAc;AACVA,0BAAU,EAAV;AACH;;AAED,gBAAMuH,gBAAgBrE,gBAAgBsE,QAAhB,GAA2BP,KAAKF,OAAL,CAAaG,cAAb,IAA+B,IAAIjE,QAAJ,CAAaC,eAAb,EAA8BlD,OAA9B,CAAhF;AACAuH,0BAAcE,UAAd;AACH,SAXD,MAWO;AACHnB,oBAAQvB,KAAR,CAAc,mDAAd;AACH;AACJ;AAjBa,CAAlB;AAmBC,WAAU2C,IAAV,EAAgBC,OAAhB,EAAyB;AACtB,QAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AAC5CD,eAAO,EAAP,EAAWD,OAAX;AACH,KAFD,MAEO,IAAI,QAAOG,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IAA8BA,OAAOC,OAAzC,EAAkD;AACrDD,eAAOC,OAAP,GAAiBJ,OAAjB;AACH,KAFM,MAEA;AACHD,aAAKM,aAAL,GAAqBL,OAArB;AACH;AACJ,CARA,aAQOb,SARP,CAAD","file":"autoforms.js","sourcesContent":["/*\n *     Copyright (c) 2016. Dmitriy Gajewski\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst AUTOFORM_FIELD_INVALID_CLASS = \"autoform-invalid\";\nconst AUTOFORM_FORM_INVALID_CLASS = \"autoform-form-invalid\";\nconst AUTOFORM_SUBMIT_INVALID_CLASS = \"autoform-submit-invalid\";\nconst AUTOFORM_HOVERED_ONCE = \"autoform-submit-hovered-once\";\nconst AUTOFORM_KEYERROR_WRAP_CLASS = \"autoforms_errors\";\nconst AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS = \"autoforms_errors\";\nconst HTML5_INPUT_TYPES = [\"text\", \"password\", \"checkbox\", \"radio\", \"number\", \"color\", \"date\", \"datetime\", \"datetime-local\", \"email\", \"range\", \"search\", \"tel\", \"time\", \"url\", \"month\", \"week\", \"file\"];\n\nconst E_VALIDATION = 100;\nconst E_EMPTY = 101;\nconst E_EMPTY_CHECKBOX = 102;\nconst DEFAULT_VALIDATORS = {\n    \"text\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Field is empty\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"password\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Field is empty\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"text-all\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Field is empty\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"text-url\": {\n        \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\n        \"errorMessage\": \"Type only latin\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"url\": {\n        \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\n        \"errorMessage\": \"Type only latin\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"date\": {\n        \"keys\": \"/.1234567890\",\n        \"errorMessage\": \"Type only numbers and delimiters\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": function (field) {\n            return (field.nodeLink.value.length < 10);\n        }\n    },\n    \"phone\": {\n        \"keys\": \"()+-0123456789()-\",\n        \"errorMessage\": \"Type only numbers\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"radio\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Please check one of radiobuttons\",\n        \"validatorFunction\": function validatorFunction(field) {\n            const checkedVals = field.autoFormLink.nodeLink.querySelector(`input[name=\"${field.nodeLink.getAttribute(\"name\")}\"]:checked`);\n\n            return checkedVals ? (checkedVals.value !== undefined || !field.dataOpts.required) : false;\n        },\n        \"keypressValidatorFunction\": false\n    },\n    \"select\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Select an element in dropdown\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    },\n    \"email\": {\n        \"keys\": \"0123456789.@qwertyuiopasdfghjklzxcvbnm-QWERTYUIOPASDFGHJKLZXCVBNM_\",\n        \"errorMessage\": \"Email is not valid\",\n        \"validatorFunction\": function (field) {\n            return (/\\S+\\@\\S+\\.[a-z]+/i).test(field.nodeLink.value);\n        },\n        \"keypressValidatorFunction\": false\n    },\n    \"checkbox\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Please select checkbox\",\n        \"validatorFunction\": function validatorFunction(field) {\n            if (field.nodeLink.checked) {\n                return true;\n            }\n            return typeof field.dataOpts.required !== \"undefined\";\n        },\n        \"keypressValidatorFunction\": false\n    },\n    \"file\": {\n        \"keys\": \"\",\n        \"errorMessage\": \"Please select file\",\n        \"validatorFunction\": function (field) {\n            return !!field.nodeLink.value;\n        }\n    },\n    \"number\": {\n        \"keys\": \"0123456789\",\n        \"errorMessage\": \"Type only numbers\",\n        \"validatorFunction\": false,\n        \"keypressValidatorFunction\": false\n    }\n};\n\nclass ErrorMessage {\n    constructor(field) {\n        if (!field.empty) {\n            this.message = field.autoFormLink.options.validators[field.type].errorMessage + \" \" + (field.nodeLink.dataset.name || field.nodeLink.name);\n            if (field.type !== \"checkbox\") {\n                this.type = E_VALIDATION;\n            } else {\n                this.type = E_EMPTY_CHECKBOX;\n            }\n        } else {\n            this.message = `${field.nodeLink.dataset.name || field.nodeLink.name} is empty`;\n            this.type = E_EMPTY;\n        }\n        this.field = field;\n    }\n}\nclass Field {\n    /**\n     * Field class describes single field.\n     * @param node\n     * @param autoForm\n     */\n\n    constructor(node, autoForm) {\n        const instance = this;\n\n        node.autoformField = instance;\n        instance.nodeLink = node;\n        instance.dataOpts = node.dataset;\n        instance.type = instance.dataOpts.fieldType || (instance.nodeLink.attributes.type ? instance.nodeLink.attributes.type.value : \"text\");\n        instance.empty = false;\n        instance.valid = false;\n        instance.autoFormLink = autoForm;\n        instance.addFieldListeners();\n    }\n\n    /**\n     * Method adds event listeners to field\n     */\n    addFieldListeners() {\n        const currentField = this;\n\n        let allowAllSymbols = false,\n            checkString,\n            additionalValidation = true;\n\n        currentField.nodeLink.addEventListener(\"keyup\", () => currentField.autoFormLink.updateState());\n        currentField.nodeLink.addEventListener(\"change\", () => currentField.autoFormLink.updateState());\n        currentField.nodeLink.addEventListener(\"click\", function () {\n            currentField.autoFormLink.updateState();\n            this.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n        });\n        currentField.nodeLink.addEventListener(\"keypress\", function (evt) {\n            if ((evt.keyCode === 13) && (currentField.autoFormLink.submit.attributes.disabled !== \"disabled\") && (this.tagName !== \"TEXTAREA\")) {\n                currentField.autoFormLink.submit.click();\n            }\n\n            if (currentField.autoFormLink.options.validators[currentField.type].keypressValidatorFunction) {\n                additionalValidation = currentField.autoFormLink.options.validators[currentField.type].keypressValidatorFunction(currentField);\n            }\n            if (currentField.autoFormLink.options.validators[currentField.type].keys) {\n                checkString = currentField.autoFormLink.options.validators[currentField.type].keys.split(\"\").map(\n                    function(char){\n                        return char.charCodeAt();\n                    }).join(\" \") + \" 8 9 10 13\";\n            } else {\n                allowAllSymbols = true;\n            }\n\n            if (additionalValidation && (!allowAllSymbols) && (checkString.search(evt.which) === -1)) {\n                evt.preventDefault();\n                return false;\n                //TODO: add popup keyerror messages\n            }\n        });\n\n        if (currentField.autoFormLink.options.PositiveValidation) {\n            currentField.nodeLink.addEventListener(\"focusout\", function () {\n                if (currentField.isValid()) {\n                    currentField.nodeLink.classList.add(\"valid\");\n                    currentField.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n                } else {\n                    if (currentField.autoFormLink.options.LeaveUnvalidHighlights && currentField.autoFormLink.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\n                        currentField.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\n                    }\n                }\n            });\n            currentField.nodeLink.addEventListener(\"focusin\", function(){\n                currentField.nodeLink.classList.remove(\"valid\");\n            });\n        }\n    }\n\n    /**\n     * Method isValids single field\n     * @param callFromGroup if called from group validator\n     * @returns {boolean|*}\n     */\n    isValid(callFromGroup) {\n        const instance = this;\n\n        instance.empty = instance.nodeLink.value === \"\";\n\n        if (!instance.empty ) {\n            if (instance.autoFormLink.options.validators[instance.type]) {\n                if (instance.autoFormLink.options.validators[instance.type].validatorFunction) {\n                    instance.valid = instance.autoFormLink.options.validators[instance.type].validatorFunction(instance);\n                } else {\n                    instance.valid = true;\n                }\n            } else {\n                instance.valid = true;\n            }\n        }\n        else {\n            if ((instance.dataOpts.required !== true) && (instance.dataOpts.required !== undefined)) {\n                instance.valid = true;\n            }\n            else {\n                instance.autoFormLink.errorString = \"Fill up required fields\";\n                instance.valid = false;\n            }\n        }\n        if (instance.dataOpts.group && !callFromGroup) {\n            instance.valid = instance.autoFormLink.isGroupValid(instance.dataOpts.group, instance.dataOpts.groupValidateOperator);\n        }\n        return instance.valid;\n    };\n}\n\n/**\n * AutoForm class constructor. Accepts html node as first argument (usually form element, but can be any of its parents too)\n * @param htmlElementNode\n * @param options\n * @constructor\n */\n\nclass AutoForm {\n    constructor(htmlElementNode, options) {\n        const instance = this;\n\n        instance.errorStack = {\n            validationErrors: [],\n            emptyErrors: [],\n            emptyCheckboxes: []\n        };\n        instance.valid = false;\n        instance.nodeLink = htmlElementNode;\n        instance.options = instance.setDefaultOptions(options);\n\n        instance.mergeValidators(options.validators);\n        instance.initMutationObserver();\n        instance.updateWatchedFieldsList();\n    }\n\n    setDefaultOptions(options) {\n        return {\n            validators: DEFAULT_VALIDATORS,\n            ShowErrorMsg: options.ShowErrorMsg || false,\n            PrettyPrintErrors: options.PrettyPrintErrors || true,\n            EnableAnimations: options.EnableAnimations || true,\n            DeactivateSubmit: options.DeactivateSubmit || true,\n            FormInvalidClass: options.FormInvalidClass || true,\n            CancelButton: options.CancelButton || \".cancel\",\n            CancelErrorMsg: options.CancelErrorMsg || false,\n            PositiveValidation: options.PositiveValidation || true,\n            LeaveUnvalidHighlights: options.LeaveUnvalidHighlights || false\n        }\n    }\n\n    mergeValidators(validators) {\n        const instance = this;\n\n        for (const key in validators) {\n            if (validators.hasOwnProperty(key)) {\n                instance.options.validators[key] = validators[key];\n            }\n        }\n    }\n\n    initMutationObserver() {\n        const instance = this;\n\n        if (MutationObserver) {\n            const observer = new MutationObserver(function(mutations) {\n                let update = false;\n\n                mutations.forEach(function(mutation) {\n                    if (mutation.type === \"childList\" && mutation.target.classList[0] !== AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS) {\n                        update = true;\n                    }\n                });\n\n                if (update) {\n                    instance.updateWatchedFieldsList();\n                }\n            });\n\n            observer.observe(instance.nodeLink, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true\n            });\n        }\n    }\n\n    /**\n     * Push error to error stack\n     * @param error\n     */\n    addErrorToStack(error) {\n        let addToStack = true;\n        this.errorStack.emptyErrors.concat(\n            this.errorStack.validationErrors.concat(this.errorStack.emptyCheckboxes)\n        ).forEach(function(err) {\n            if (error.message === err.message) {\n                addToStack = false;\n            }\n        });\n\n        if (addToStack) {\n            switch (error.type) {\n                case E_EMPTY_CHECKBOX: {\n                    this.errorStack.emptyCheckboxes.push(error);\n                } break;\n                case E_VALIDATION: {\n                    this.errorStack.validationErrors.push(error);\n                } break;\n                default: {\n                    this.errorStack.emptyErrors.push(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear error stack\n     */\n    clearErrorsStack() {\n        this.errorStack.emptyErrors = [];\n        this.errorStack.validationErrors = [];\n        this.errorStack.emptyCheckboxes = [];\n    }\n\n    getSubmitButtonNode() {\n        const instance = this;\n\n        return instance.nodeLink.querySelector(\"input[type=\\\"submit\\\"]\") ||\n            instance.nodeLink.querySelector(\"button[type=\\\"submit\\\"]\") ||\n            document.querySelector(`input[form=\"${instance.nodeLink.id}\"]`) ||\n            document.querySelector(`button[form=\"${instance.nodeLink.id}\"]`) ||\n            instance.nodeLink.querySelector(\"button\")\n    }\n\n    /**\n     * updates fields list in object (you can call this method to update fields if form changed)\n     */\n    updateWatchedFieldsList() {\n        const instance = this;\n\n        instance.submit = instance.getSubmitButtonNode();\n        instance.fields = [];\n        const thisNodeId = instance.nodeLink.id;\n        const fields = instance.nodeLink.querySelectorAll(\n            (HTML5_INPUT_TYPES.map(function (fieldTypeHTML) {\n                return `input[type=\"${fieldTypeHTML}\"], input[type=\"${fieldTypeHTML}\"][form=\"${thisNodeId}\"]`;\n            }).join(\", \")) +\n            \", select, \" +\n            \"textarea, \" +\n            `select[form=\"${this.nodeLink.id}\"]`);\n\n        for (const field of fields) {\n            instance.fields.push(new Field(field, instance));\n        }\n    }\n\n    /**\n     * returns array of fields filtered by group\n     * @param groupName\n     * @returns {Array.<*>}\n     */\n    getFieldsByGroup(groupName) {\n        const instance = this;\n\n        return instance.fields.filter(function (field) {\n            return field.dataOpts.group === groupName;\n        });\n    }\n\n    /**\n     * Validate fields grouped by data-group attribute\n     * @param groupName\n     * @param operator validation operator (currently \"or\" or \"and\")\n     * @returns {boolean}\n     */\n    isGroupValid(groupName, operator) {\n        const instance = this;\n        const fields = instance.getFieldsByGroup(groupName);\n        let groupValid = false;\n        \n        switch (operator) {\n            case \"or\": {\n                fields.forEach(function (field) {\n                    if (field.isValid(true)) {\n                        groupValid = true;\n                    }\n                });\n            } break;\n            case \"and\": {\n                groupValid = true;\n                fields.forEach(function (field) {\n                    if (!field.isValid(true)) {\n                        groupValid = false;\n                    }\n                });\n            } break;\n            default: {\n                groupValid = true;\n                fields.forEach(function (field) {\n                    if (!field.isValid(true)) {\n                        groupValid = false;\n                    }\n                });\n            } break;\n        }\n\n        return groupValid;\n    }\n\n    /**\n     * Checks all fields of form. If at least one field is not valid (isValid() method returns false) returns false\n     * @returns {boolean}\n     */\n    isValid() {\n        const instance = this;\n        \n        instance.clearErrorsStack();\n        instance.valid = true;\n\n        for (const field of instance.fields) {\n            if (!field.isValid()) {\n                instance.valid = false;\n                instance.addErrorToStack(new ErrorMessage(field));\n            }\n        }\n        return instance.valid;\n    };\n\n    /**\n     * This method run actions that changes form states\n     */\n    updateState() {\n        const instance = this;\n\n        if (instance.isValid()) {\n            try {\n                instance.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = \"\";\n                if (instance.options.FormInvalidClass) {\n                    instance.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n                }\n                if (instance.options.DeactivateSubmit) {\n                    instance.submit.parentElement.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\n                    instance.submit.removeAttribute(\"disabled\");\n                }\n            } catch (e) {\n                console.error(`(Error) in autoforms: ${e.message}`);\n            }\n            return;\n        }\n\n        if (instance.options.PrettyPrintErrors) {\n            try {\n                instance.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML =\n                    `${(function () {\n                        if (instance.errorStack.emptyErrors.length > 0) {\n                            return `<div class=\"empty-errors\">\n                                            <div class=\"title\">The following fields is empty:</div>\n                                            <div class=\"error-list\">\n                                                ${instance.errorStack.emptyErrors.map(function (err) {\n                                return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name }</span>`;\n                            }).join(\"\")}\n                                            </div>\n                                         </div>`;\n                        } else {\n                            return \"\";\n                        }\n                    })()}\n                    ${(function () {\n                        if (instance.errorStack.validationErrors.length > 0) {\n                            return `<div class=\"validation-errors\">\n                                        <div class=\"title\">Check the correctness of the fields:</div>\n                                        <div class=\"error-list\">\n                                            ${instance.errorStack.validationErrors.map(function (err) {\n                                return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\n                            }).join(\"\")}\n                                        </div>\n                                     </div>`;\n                        } else {\n                            return \"\";\n                        }\n                    })()}\n                    ${(function () {\n                        if (instance.errorStack.emptyCheckboxes.length > 0) {\n                            return `<div class=\"empty-checkboxes-errors\">\n                                        <div class=\"title\">Check the checkboxes:</div>\n                                        <div class=\"error-list\">\n                                            ${instance.errorStack.emptyCheckboxes.map(function (err) {\n                                return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\n                            }).join(\"\")}\n                                        </div>\n                                     </div>`;\n                        } else {\n                            return \"\";\n                        }\n                    })()}`;\n            } catch (e) {\n                console.error(`(Error) in autoforms: ${e.message}`);\n            }\n        } else {\n            try {\n                instance.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = instance.errorStack.emptyErrors.concat(instance.errorStack.validationErrors.concat(instance.errorStack.emptyCheckboxes)).map(function (err) {\n                    return `<span class=\"error-message\">${err.message}</span><br>`;\n                }).join(\"\");\n            } catch (e) {\n                console.error(`(Error) in autoforms: ${e.message}`);\n            }\n        }\n        if (instance.options.FormInvalidClass) {\n            instance.nodeLink.classList.add(AUTOFORM_FORM_INVALID_CLASS);\n        }\n        if (instance.options.DeactivateSubmit) {\n            instance.submit.parentElement.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\n            instance.submit.setAttribute(\"disabled\", \"disabled\");\n        }\n    }\n\n    /**\n     * This method inits all events of form including field events and submit hover events\n     */\n    initEvents() {\n        const instance = this;\n\n        instance.submit.parentNode.addEventListener(\"mouseenter\", function () {\n            instance.highlightInvalidFields(\"on\");\n            if (!instance.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\n                instance.nodeLink.classList.add(AUTOFORM_HOVERED_ONCE);\n            }\n        });\n        instance.submit.parentNode.addEventListener(\"mouseleave\", function () {\n            if (!instance.options.LeaveUnvalidHighlights) {\n                instance.highlightInvalidFields(\"off\");\n            }\n            if (instance.options.ShowErrorMsg) {\n                if (instance.options.EnableAnimations) {\n                    instance.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\n                }\n                else {\n                    instance.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\n                }\n\n            }\n        });\n\n\n        if (instance.valid) {\n            if (instance.options.FormInvalidClass) {\n                instance.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n            }\n            if (instance.options.DeactivateSubmit) {\n                instance.submit.parentNode.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\n                if (instance.submit.attributes.disabled) {\n                    instance.submit.removeAttribute(\"disabled\");\n                }\n\n            }\n        }\n        else {\n            if (instance.options.FormInvalidClass) {\n                instance.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n            }\n            if (instance.options.DeactivateSubmit) {\n                instance.submit.parentNode.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\n                instance.submit.setAttribute(\"disabled\", \"disabled\");\n            }\n        }\n\n        if (instance.options.CancelErrorMsg) {\n            document.querySelector(instance.options.CancelButton).addEventListener(\"mouseenter\", function () {\n                instance.errorString = \"Будут отменены все изменения!\";\n            });\n            document.querySelector(instance.options.CancelButton).addEventListener(\"mouseleave\", function () {\n                instance.errorString = \"\";\n                if (instance.options.EnableAnimations) {\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\n                }\n                else {\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\n                }\n            });\n        }\n    }\n\n    /**\n     * This method just highlighting invalid fields.\n     * @param opts (off|on) off - removes highlight class from fields\n     */\n    highlightInvalidFields(opts) {\n        const instance = this;\n\n        for (const field of instance.fields) {\n            if (opts !== \"off\") {\n                if (field.isValid()) {\n                    field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n                } else {\n                    field.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\n                }\n            }\n\n            if (opts === \"off\") {\n                field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n            }\n        }\n    };\n}\n\nconst autoforms = {\n    widgets: {}, // all widgets with inited autoform\n    init: function (htmlElementNode, options) {\n        if (htmlElementNode) {\n            const aufm = this;\n\n            const newElementName = (htmlElementNode.className + htmlElementNode.id).toLowerCase().replace(new RegExp(\"[^[a-zA-Z0-9]]*\", \"g\"), \"_\");\n\n            if (!options) {\n                options = {};\n            }\n\n            const newAufmWidget = htmlElementNode.autoform = aufm.widgets[newElementName] = new AutoForm(htmlElementNode, options);\n            newAufmWidget.initEvents();\n        } else {\n            console.error(\"Error: trying to init autoforms on undefined node\");\n        }\n    }\n};\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory;\n    } else {\n        root.returnExports = factory;\n    }\n}(this, autoforms));\n"]}