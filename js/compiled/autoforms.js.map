{"version":3,"sources":["autoforms.js"],"names":["AUTOFORM_FIELD_INVALID_CLASS","AUTOFORM_FORM_INVALID_CLASS","AUTOFORM_SUBMIT_INVALID_CLASS","AUTOFORM_HOVERED_ONCE","AUTOFORM_KEYERROR_WRAP_CLASS","AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS","HTML5_INPUT_TYPES","E_VALIDATION","E_EMPTY","E_EMPTY_CHECKBOX","ErrorMessage","field","empty","message","autoFormLink","options","Validators","type","errorMessage","nodeLink","dataset","name","Field","node","autoForm","currentField","autoformField","dataOpts","fieldType","attributes","value","valid","addFieldActions","allowAllSymbols","checkString","additionalValidation","addEventListener","updateState","classList","remove","evt","keyCode","submit","disabled","tagName","click","keypressValidatorFunction","keys","split","map","char","charCodeAt","join","search","which","preventDefault","PositiveValidation","validate","add","LeaveUnvalidHighlights","contains","callFromGroup","self","validatorFunction","required","undefined","errorString","group","validateGroupWithOperator","groupValidateOperator","AutoForm","htmlElementNode","thisAutoForm","errorStack","validationErrors","emptyErrors","emptyCheckboxes","length","checkedVals","querySelector","getAttribute","test","checked","ShowErrorMsg","PrettyPrintErrors","EnableAnimations","DeactivateSubmit","FormInvalidClass","CancelButton","CancelErrorMsg","key","hasOwnProperty","updateFields","MutationObserver","observer","mutations","update","forEach","mutation","target","observe","childList","characterData","subtree","error","addToStack","concat","err","push","document","id","fields","thisNodeId","querySelectorAll","fieldTypeHTML","groupName","filter","operator","getFieldsByGroup","groupValid","clearErrors","pushError","innerHTML","parentElement","removeAttribute","e","console","log","setAttribute","parentNode","highlightInvalidFields","getElementById","style","opacity","opts","autoforms","widgets","init","aufm","newElementName","className","toLowerCase","replace","RegExp","newAufmWidget","autoform","initEvents","root","factory","define","amd","module","exports","returnExports"],"mappings":"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","file":"autoforms.js","sourcesContent":["/*\n *     Copyright (c) 2016. Dmitriy Gajewski\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\"use strict\";\n\nconst AUTOFORM_FIELD_INVALID_CLASS = \"autoform-invalid\";\nconst AUTOFORM_FORM_INVALID_CLASS = \"autoform-form-invalid\";\nconst AUTOFORM_SUBMIT_INVALID_CLASS = \"autoform-submit-invalid\";\nconst AUTOFORM_HOVERED_ONCE = \"autoform-submit-hovered-once\";\nconst AUTOFORM_KEYERROR_WRAP_CLASS = \"autoforms_errors\";\nconst AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS = \"autoforms_errors\";\nconst HTML5_INPUT_TYPES = [\"text\", \"password\", \"checkbox\", \"radio\", \"number\", \"color\", \"date\", \"datetime\", \"datetime-local\", \"email\", \"range\", \"search\", \"tel\", \"time\", \"url\", \"month\", \"week\", \"file\"];\n\nconst E_VALIDATION = 100;\nconst E_EMPTY = 101;\nconst E_EMPTY_CHECKBOX = 102;\n\nclass ErrorMessage {\n    constructor(field) {\n        if (!field.empty) {\n            this.message = field.autoFormLink.options.Validators[field.type].errorMessage + \" \" + (field.nodeLink.dataset.name || field.nodeLink.name);\n            if (field.type !== \"checkbox\") {\n                this.type = E_VALIDATION;\n            } else {\n                this.type = E_EMPTY_CHECKBOX;\n            }\n        } else {\n            this.message = `${field.nodeLink.dataset.name || field.nodeLink.name} is empty`;\n            this.type = E_EMPTY;\n        }\n        this.field = field;\n    }\n}\n\nclass Field {\n    /**\n     * Field class describes single field.\n     * @param node\n     * @param autoForm\n     */\n\n    constructor(node, autoForm) {\n        let currentField = this;\n        currentField.nodeLink = node;\n        node.autoformField = currentField;\n        currentField.dataOpts = node.dataset;\n        currentField.type = currentField.dataOpts.fieldType || (currentField.nodeLink.attributes.type ? currentField.nodeLink.attributes.type.value : \"text\");\n        currentField.empty = false;\n        currentField.valid = false;\n        currentField.autoFormLink = autoForm;\n        currentField.addFieldActions();\n    }\n\n    /**\n     * Method adds event listeners to field\n     */\n    addFieldActions() {\n        let currentField = this;\n        let allowAllSymbols = false,\n            checkString,\n            additionalValidation = true;\n\n        currentField.nodeLink.addEventListener(\"keyup\", () => currentField.autoFormLink.updateState());\n        currentField.nodeLink.addEventListener(\"change\", () => currentField.autoFormLink.updateState());\n        currentField.nodeLink.addEventListener(\"click\", function () {\n            currentField.autoFormLink.updateState();\n            this.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n        });\n        currentField.nodeLink.addEventListener(\"keypress\", function (evt) {\n            if ((evt.keyCode === 13) && (currentField.autoFormLink.submit.attributes.disabled !== \"disabled\") && (this.tagName !== \"TEXTAREA\")) {\n                currentField.autoFormLink.submit.click();\n            }\n\n            if (currentField.autoFormLink.options.Validators[currentField.type].keypressValidatorFunction) {\n                additionalValidation = currentField.autoFormLink.options.Validators[currentField.type].keypressValidatorFunction(currentField);\n            }\n            if (currentField.autoFormLink.options.Validators[currentField.type].keys) {\n                checkString = currentField.autoFormLink.options.Validators[currentField.type].keys.split(\"\").map(\n                    function(char){\n                        return char.charCodeAt();\n                    }).join(\" \") + \" 8 9 10 13\";\n            } else {\n                allowAllSymbols = true;\n            }\n\n            if (additionalValidation && (!allowAllSymbols) && (checkString.search(evt.which) === -1)) {\n                evt.preventDefault();\n                return false;\n                //TODO: add popup keyerror messages\n            }\n        });\n\n        if (currentField.autoFormLink.options.PositiveValidation) {\n            currentField.nodeLink.addEventListener(\"focusout\", function () {\n                if (currentField.validate()) {\n                    currentField.nodeLink.classList.add(\"valid\");\n                    currentField.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n                } else {\n                    if (currentField.autoFormLink.options.LeaveUnvalidHighlights && currentField.autoFormLink.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\n                        currentField.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\n                    }\n                }\n            });\n            currentField.nodeLink.addEventListener(\"focusin\", function(){\n                currentField.nodeLink.classList.remove(\"valid\");\n            });\n        }\n    }\n\n    /**\n     * Method validates single field\n     * @param callFromGroup if called from group validator\n     * @returns {boolean|*}\n     */\n    validate(callFromGroup) {\n        let self = this;\n        self.empty = self.nodeLink.value === \"\";\n        if (!self.empty ) { // if field is not empty\n            if (self.autoFormLink.options.Validators[self.type]) {\n                if (self.autoFormLink.options.Validators[self.type].validatorFunction) {\n                    self.valid = self.autoFormLink.options.Validators[self.type].validatorFunction(self);\n                } else {\n                    self.valid = true;\n                }\n            } else {\n                self.valid = true;\n            }\n        }\n        else {\n            if ((self.dataOpts.required !== true) && (self.dataOpts.required !== undefined)) {\n                self.valid = true;\n            }\n            else {\n                self.autoFormLink.errorString = \"Fill up required fields\";\n                self.valid = false;\n            }\n        }\n        if (self.dataOpts.group && !callFromGroup) {\n            self.valid = self.autoFormLink.validateGroupWithOperator(self.dataOpts.group, self.dataOpts.groupValidateOperator);\n        }\n        return self.valid;\n    };\n}\n\n/**\n * AutoForm class constructor. Accepts html node as first argument (usually form element, but can be any of its parents too)\n * @param htmlElementNode\n * @param options\n * @constructor\n */\n\nclass AutoForm {\n    constructor(htmlElementNode, options) {\n        let thisAutoForm = this;\n\n        this.errorStack = {\n            validationErrors: [],\n            emptyErrors: [],\n            emptyCheckboxes: []\n        };\n        this.options = {\n            Validators: {\n                \"text\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Field is empty\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"password\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Field is empty\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"text-all\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Field is empty\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"text-url\": {\n                    \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\n                    \"errorMessage\": \"Type only latin\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"url\": {\n                    \"keys\": \"1234567890-=_+qwertyuiop[]asdfghjkl;\\\"zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:ZXCVBNM<>?\",\n                    \"errorMessage\": \"Type only latin\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"date\": {\n                    \"keys\": \"/.1234567890\",\n                    \"errorMessage\": \"Type only numbers and delimiters\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": function (field) {\n                        return (field.nodeLink.value.length < 10);\n                    }\n                },\n                \"phone\": {\n                    \"keys\": \"()+-0123456789()-\",\n                    \"errorMessage\": \"Type only numbers\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"radio\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Please check one of radiobuttons\",\n                    \"validatorFunction\": function validatorFunction(field) {\n                        let checkedVals = field.autoFormLink.nodeLink.querySelector(`input[name=\"${field.nodeLink.getAttribute(\"name\")}\"]:checked`);\n                        return checkedVals ? (checkedVals.value !== undefined || !field.dataOpts.required) : false;\n                    },\n                    \"keypressValidatorFunction\": false\n                },\n                \"select\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Select an element in dropdown\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                },\n                \"email\": {\n                    \"keys\": \"0123456789.@qwertyuiopasdfghjklzxcvbnm-QWERTYUIOPASDFGHJKLZXCVBNM_\",\n                    \"errorMessage\": \"Email is not valid\",\n                    \"validatorFunction\": function (field) {\n                        return (/\\S+\\@\\S+\\.[a-z]+/i).test(field.nodeLink.value);\n                    },\n                    \"keypressValidatorFunction\": false\n                },\n                \"checkbox\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Please select checkbox\",\n                    \"validatorFunction\": function validatorFunction(field) {\n                        if (field.nodeLink.checked) {\n                            return true;\n                        }\n                        return typeof field.dataOpts.required !== \"undefined\";\n                    },\n                    \"keypressValidatorFunction\": false\n                },\n                \"file\": {\n                    \"keys\": \"\",\n                    \"errorMessage\": \"Please select file\",\n                    \"validatorFunction\": function (field) {\n                        return !!field.nodeLink.value;\n                    }\n                },\n                \"number\": {\n                    \"keys\": \"0123456789\",\n                    \"errorMessage\": \"Type only numbers\",\n                    \"validatorFunction\": false,\n                    \"keypressValidatorFunction\": false\n                }\n            },\n            ShowErrorMsg: options.ShowErrorMsg || false,\n            PrettyPrintErrors: options.PrettyPrintErrors || true,\n            EnableAnimations: options.EnableAnimations || true,\n            DeactivateSubmit: options.DeactivateSubmit || true,\n            FormInvalidClass: options.FormInvalidClass || true,\n            // InvalidKeyErrorMsg: options.InvalidKeyErrorMsg || true,\n            // InvalidKeyTimeout: options.InvalidKeyTimeout || 1000,\n            // TODO: return this options when keypress errors will be complete\n            CancelButton: options.CancelButton || \".cancel\",\n            CancelErrorMsg: options.CancelErrorMsg || false,\n            PositiveValidation: options.PositiveValidation || true,\n            LeaveUnvalidHighlights: options.LeaveUnvalidHighlights || false\n        };\n        for (let key in options.Validators) {\n            if (options.Validators.hasOwnProperty(key)) {\n                this.options.Validators[key] = options.Validators[key];\n            }\n        }\n        this.valid = false;\n        this.nodeLink = htmlElementNode;\n        this.updateFields();\n        if (MutationObserver) {\n            let observer = new MutationObserver(function(mutations) {\n                let update = false;\n                mutations.forEach(function(mutation) {\n                    if (mutation.type === \"childList\" && mutation.target.classList[0] !== AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS) {\n                        update = true;\n                        // console.log(mutation);\n                    }\n                });\n\n                if (update) {\n                    thisAutoForm.updateFields();\n                }\n            });\n\n            observer.observe(htmlElementNode, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true\n            });\n        }\n    }\n\n    /**\n     * Push error to error stack\n     * @param error\n     */\n    pushError(error) {\n        let addToStack = true;\n        this.errorStack.emptyErrors.concat(this.errorStack.validationErrors.concat(this.errorStack.emptyCheckboxes)).forEach(function(err) {\n            if (error.message === err.message) {\n                addToStack = false;\n            }\n        });\n        if (addToStack) {\n            switch (error.type) {\n                case E_EMPTY: {\n                    this.errorStack.emptyErrors.push(error);\n                } break;\n                case E_EMPTY_CHECKBOX: {\n                    this.errorStack.emptyCheckboxes.push(error);\n                } break;\n                case E_VALIDATION: {\n                    this.errorStack.validationErrors.push(error);\n                } break;\n                default: {\n                    this.errorStack.emptyErrors.push(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear error stack\n     */\n    clearErrors() {\n        this.errorStack.emptyErrors = [];\n        this.errorStack.validationErrors = [];\n        this.errorStack.emptyCheckboxes = [];\n    }\n\n    /**\n     * updates fields list in object (you can call this method to update fields if form changed)\n     */\n    updateFields() {\n        let thisAutoForm = this;\n\n        this.submit = this.nodeLink.querySelector(\"input[type=\\\"submit\\\"]\") ||\n                      this.nodeLink.querySelector(\"button[type=\\\"submit\\\"]\") ||\n                      document.querySelector(`input[form=\"${this.nodeLink.id}\"]`) ||\n                      document.querySelector(`button[form=\"${this.nodeLink.id}\"]`) ||\n                      this.nodeLink.querySelector(\"button\");\n        this.fields = [];\n        let thisNodeId = this.nodeLink.id;\n        let fields = this.nodeLink.querySelectorAll(\n            (HTML5_INPUT_TYPES.map(function (fieldTypeHTML) {\n                return `input[type=\"${fieldTypeHTML}\"], input[type=\"${fieldTypeHTML}\"][form=\"${thisNodeId}\"]`;\n            }).join(\", \")) +\n            \", select, \" +\n            \"textarea, \" +\n            `select[form=\"${this.nodeLink.id}\"]`);\n\n        for (let field of fields) {\n            this.fields.push(new Field(field, thisAutoForm));\n        }\n    }\n\n    /**\n     * returns array of fields filtered by group\n     * @param groupName\n     * @returns {Array.<*>}\n     */\n    getFieldsByGroup(groupName) {\n        let thisAutoForm = this;\n        return thisAutoForm.fields.filter(function (field) {\n            return field.dataOpts.group === groupName;\n        });\n    }\n\n    /**\n     * Validate fields grouped by data-group attribute\n     * @param groupName\n     * @param operator validation operator (currently \"or\" or \"and\")\n     * @returns {boolean}\n     */\n    validateGroupWithOperator(groupName, operator) {\n        let thisAutoForm = this,\n            fields = thisAutoForm.getFieldsByGroup(groupName),\n            groupValid = false;\n        switch (operator) {\n            case \"or\": {\n                fields.forEach(function (field) {\n                    if (field.validate(true)) {\n                        groupValid = true;\n                    }\n                });\n            } break;\n            case \"and\": {\n                groupValid = true;\n                fields.forEach(function (field) {\n                    if (!field.validate(true)) {\n                        groupValid = false;\n                    }\n                });\n            } break;\n            default: {\n                groupValid = true;\n                fields.forEach(function (field) {\n                    if (!field.validate(true)) {\n                        groupValid = false;\n                    }\n                });\n            } break;\n        }\n\n        return groupValid;\n    }\n\n    /**\n     * Checks all fields of form. If at least one field is not valid (validate() method returns false) returns false\n     * @returns {boolean}\n     */\n    validate() {\n        let self = this;\n        self.clearErrors();\n        self.valid = true;\n        for (let field of self.fields) {\n            if (!field.validate()) {\n                self.valid = false;\n                self.pushError(new ErrorMessage(field));\n            }\n        }\n        return self.valid;\n    };\n\n    /**\n     * This method run actions that changes form states\n     */\n    updateState() {\n        let self = this;\n        if (self.validate()) {\n            try {\n                self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = \"\";\n                if (self.options.FormInvalidClass) {\n                    self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n                }\n                if (self.options.DeactivateSubmit) {\n                    self.submit.parentElement.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\n                    self.submit.removeAttribute(\"disabled\");\n                }\n            } catch (e) {\n                console.log(`(Error) in autoforms: ${e.message}`);\n            }\n        }\n        else {\n            if (self.options.PrettyPrintErrors) {\n                try {\n                    self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML =\n                        `${(function () {\n                            if (self.errorStack.emptyErrors.length > 0) {\n                                return `<div class=\"empty-errors\">\n                                            <div class=\"title\">The following fields is empty:</div>\n                                            <div class=\"error-list\">\n                                                ${self.errorStack.emptyErrors.map(function (err) {\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name }</span>`;\n                                }).join(\"\")}\n                                            </div>\n                                         </div>`;\n                            } else {\n                                return \"\";\n                            }\n                        })()}\n                    ${(function () {\n                            if (self.errorStack.validationErrors.length > 0) {\n                                return `<div class=\"validation-errors\">\n                                        <div class=\"title\">Check the correctness of the fields:</div>\n                                        <div class=\"error-list\">\n                                            ${self.errorStack.validationErrors.map(function (err) {\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\n                                }).join(\"\")}\n                                        </div>\n                                     </div>`;\n                            } else {\n                                return \"\";\n                            }\n                        })()}\n                    ${(function () {\n                            if (self.errorStack.emptyCheckboxes.length > 0) {\n                                return `<div class=\"empty-checkboxes-errors\">\n                                        <div class=\"title\">Check the checkboxes:</div>\n                                        <div class=\"error-list\">\n                                            ${self.errorStack.emptyCheckboxes.map(function (err) {\n                                    return `<span class=\"error-message\">${err.field.dataOpts.name || err.field.nodeLink.name}</span>`;\n                                }).join(\"\")}\n                                        </div>\n                                     </div>`;\n                            } else {\n                                return \"\";\n                            }\n                        })()}`;\n                } catch (e) {\n                    console.log(`(Error) in autoforms: ${e.message}`);\n                }\n            } else {\n                try {\n                    self.nodeLink.querySelector(`.${AUTOFORM_VALIDATE_ERRORS_WRAP_CLASS}`).innerHTML = self.errorStack.emptyErrors.concat(self.errorStack.validationErrors.concat(self.errorStack.emptyCheckboxes)).map(function (err) {\n                        return `<span class=\"error-message\">${err.message}</span><br>`;\n                    }).join(\"\");\n                } catch (e) {\n                    console.log(`(Error) in autoforms: ${e.message}`);\n                }\n            }\n            if (self.options.FormInvalidClass) {\n                self.nodeLink.classList.add(AUTOFORM_FORM_INVALID_CLASS);\n            }\n            if (self.options.DeactivateSubmit) {\n                self.submit.parentElement.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\n                self.submit.setAttribute(\"disabled\", \"disabled\");\n            }\n        }\n    }\n\n\n    /**\n     * This method inits all events of form including field events and submit hover events\n     */\n    initEvents() {\n        let self = this;\n\n        self.submit.parentNode.addEventListener(\"mouseenter\", function () {\n            self.highlightInvalidFields(\"on\");\n            if (!self.nodeLink.classList.contains(AUTOFORM_HOVERED_ONCE)) {\n                self.nodeLink.classList.add(AUTOFORM_HOVERED_ONCE);\n            }\n        });\n        self.submit.parentNode.addEventListener(\"mouseleave\", function () {\n            if (!self.options.LeaveUnvalidHighlights) {\n                self.highlightInvalidFields(\"off\");\n            }\n            /*if (self.valid) {\n            }*/\n            if (self.options.ShowErrorMsg) {\n                if (self.options.EnableAnimations) {\n                    self.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\n                }\n                else {\n                    self.nodeLink.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\n                }\n\n            }\n        });\n\n\n        if (self.valid) {\n            if (self.options.FormInvalidClass) {\n                self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n            }\n            if (self.options.DeactivateSubmit) {\n                self.submit.parentNode.classList.remove(AUTOFORM_SUBMIT_INVALID_CLASS);\n                if (self.submit.attributes.disabled) {\n                    self.submit.removeAttribute(\"disabled\");\n                }\n\n            }\n        }\n        else {\n            if (self.options.FormInvalidClass) {\n                self.nodeLink.classList.remove(AUTOFORM_FORM_INVALID_CLASS);\n            }\n            if (self.options.DeactivateSubmit) {\n                self.submit.parentNode.classList.add(AUTOFORM_SUBMIT_INVALID_CLASS);\n                self.submit.setAttribute(\"disabled\", \"disabled\");\n            }\n        }\n\n        if (self.options.CancelErrorMsg) {\n            document.querySelector(self.options.CancelButton).addEventListener(\"mouseenter\", function () {\n                self.errorString = \"Будут отменены все изменения!\";\n            });\n            document.querySelector(self.options.CancelButton).addEventListener(\"mouseleave\", function () {\n                self.errorString = \"\";\n                if (self.options.EnableAnimations) {\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).style.opacity = 0;\n                }\n                else {\n                    document.getElementById(AUTOFORM_KEYERROR_WRAP_CLASS).innerHTML = \"\";\n                }\n            });\n        }\n    }\n\n    /**\n     * This method just highlighting invalid fields.\n     * @param opts (off|on) off - removes highlight class from fields\n     */\n    highlightInvalidFields(opts) {\n        let self = this;\n        for (let field of self.fields) {\n            if (opts !== \"off\") {\n                if (field.validate()) {\n                    field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n                }\n                else {\n                    field.nodeLink.classList.add(AUTOFORM_FIELD_INVALID_CLASS);\n                }\n            }\n\n            if (opts === \"off\") {\n                field.nodeLink.classList.remove(AUTOFORM_FIELD_INVALID_CLASS);\n            }\n        }\n    };\n}\n\nlet autoforms = {\n    widgets: {}, // all widgets with inited autoform\n    init: function (htmlElementNode, options) {\n        if (htmlElementNode) {\n            let aufm = this,\n\n                newElementName = (htmlElementNode.className + htmlElementNode.id).toLowerCase().replace(new RegExp(\"[^[a-zA-Z0-9]]*\", \"g\"), \"_\");\n\n            if (!options) {\n                options = {};\n            }\n\n            let newAufmWidget = htmlElementNode.autoform = aufm.widgets[newElementName] = new AutoForm(htmlElementNode, options);\n            newAufmWidget.initEvents();\n        } else {\n            console.error(\"Error: trying to init autoforms on undefined node\");\n        }\n    }\n};\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory;\n    } else {\n        root.returnExports = factory;\n    }\n}(this, autoforms));\n"]}